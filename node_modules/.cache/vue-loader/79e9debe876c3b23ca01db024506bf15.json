{"remainingRequest":"/Users/pankajsakariya/Desktop/brijesh/convergence/Convergencefinal/convergenceharrypotter/convergence2k19/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/pankajsakariya/Desktop/brijesh/convergence/Convergencefinal/convergenceharrypotter/convergence2k19/src/views/chamberOfCoders.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/pankajsakariya/Desktop/brijesh/convergence/Convergencefinal/convergenceharrypotter/convergence2k19/src/views/chamberOfCoders.vue","mtime":1552401734000},{"path":"/Users/pankajsakariya/Desktop/brijesh/convergence/Convergencefinal/convergenceharrypotter/convergence2k19/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pankajsakariya/Desktop/brijesh/convergence/Convergencefinal/convergenceharrypotter/convergence2k19/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport events from '../events'\nexport default {\n  name: \"chamberOfCoders\",\n  data() {\n    return {\n      events,\n      deptEvents: [],\n      eventsDetail: null\n    }\n  },\n  created() {\n    let self = this\n    this.events.forEach(function (event) {\n      if (event.department === \"cpit\")\n        self.deptEvents.push(event)\n    })\n  },\n  mounted() {\n    let tl = new this.$gsap.TimelineMax()\n    tl.from('.logo img', 0.5, {\n      scale: 5,\n      autoAlpha: 0\n    })\n    tl.from('.hat', 0.2, {\n      y: -100\n    })\n    tl.to('.hat', 0.5, {\n      rotation: -90\n    })\n    tl.to('.hat', 0.5, {\n      x: -15 + '%'\n    })\n    tl.from('.heading', 0.5, {\n      autoAlpha: 0,\n      x: -15 + \"%\",\n      scaleX: 0\n      // width: 0\n      // left: -15% + \"%\"\n    }, \"-=0.5\")\n\n    tl.to('.logo', 0.5, {\n      autoAlpha: 0\n    }, \"+=0.5\")\n\n    tl.staggerFrom('.event', 1, {\n      autoAlpha: 0,\n      cycle: {\n        x: function(i) {\n          if(i%2 === 0)\n            return -50\n          else\n            return 50\n        }\n      }\n    }, 0.2)\n\n    Array.from(document.querySelector('.events').children, (event) => {\n      let letters = event.innerHTML.split(\"\")\n      let blockLetters = []\n      letters.forEach((letter) => {\n        if (letter === \" \")\n          blockLetters.push(\"<div class=\\\"letter\\\"> &nbsp; </div>\")\n        else\n          blockLetters.push(\"<div class=\\\"letter\\\">\" + letter + \"</div>\")\n      })\n      event.innerHTML = blockLetters.join(\"\")\n    })\n\n    let letters = document.querySelectorAll('.letter')\n    letters.forEach(function (letter) {\n      letter.style.display = \"inline-block\"\n    })\n\n    let t2 = new this.$gsap.TimelineMax({\n      repeat: -1,\n      yoyo: true\n    })\n\n    tl.staggerTo(\".letter\", 0.5, {\n      scale: 1.2\n    }, 0.1)\n\n    tl.staggerTo(\".letter\", 0.5, {\n      scale: 1\n    }, 0.1, 0)\n  }\n}\n",{"version":3,"sources":["chamberOfCoders.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"chamberOfCoders.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div id=\"chamberOfCoders\">\n        <div class=\"backArrow\" @click=\"$router.push('/map')\">\n            <span><</span>\n        </div>\n        <div class=\"logo\">\n            <img src=\"../assets/Chamber_of_coders.png\" alt=\"\" class=\"img-fluid\">\n            <div class=\"hat\">\n                <img src=\"../assets/hat.png\" alt=\"\" class=\"img-fluid\">\n            </div>\n            <h1 class=\"heading\">Chamber of Coders</h1>\n        </div>\n        <div class=\"events\">\n            <div class=\"event\" v-for=\"event in deptEvents\" @click=\"eventsDetail = event\">\n                {{event.eventName}}\n            </div>\n        </div>\n        <transition name=\"slit\">\n            <div class=\"eventDescription\" v-if=\"eventsDetail\">\n                <div class=\"eventName\">{{eventsDetail.eventName}}</div>\n                <div class=\"tagline\">{{eventsDetail.tagline}}</div>\n                <div class=\"entryFee\">Entry Fee: {{eventsDetail.entryFee}}</div>\n                <div class=\"entryFee\">Team Size: {{eventsDetail.teamSize}}</div>\n                <div class=\"rounds mx-auto\">\n                    <div class=\"round\" v-for=\"(round, index) in eventsDetail.rounds\">\n                        <span class=\"roundIndice\">Round {{index + 1}} : </span>\n                        <pre>{{round}}</pre>\n                    </div>\n                </div>\n                <div class=\"notes\" v-if=\"eventsDetail.notes\">\n                    Notes: <pre>{{eventsDetail.notes}}</pre>\n                </div>\n                <div class=\"managers\">\n                    <div class=\"manager\" v-for=\"manager in eventsDetail.managers\">\n                        <div class=\"name\">{{manager.name}}</div>\n                        <div class=\"contact\">{{manager.phone}}</div>\n                    </div>\n                </div>\n                <div class=\"back\" @click=\"eventsDetail = null\">Back</div>\n            </div>\n        </transition>\n    </div>\n</template>\n\n<script>\n  import events from '../events'\n  export default {\n    name: \"chamberOfCoders\",\n    data() {\n      return {\n        events,\n        deptEvents: [],\n        eventsDetail: null\n      }\n    },\n    created() {\n      let self = this\n      this.events.forEach(function (event) {\n        if (event.department === \"cpit\")\n          self.deptEvents.push(event)\n      })\n    },\n    mounted() {\n      let tl = new this.$gsap.TimelineMax()\n      tl.from('.logo img', 0.5, {\n        scale: 5,\n        autoAlpha: 0\n      })\n      tl.from('.hat', 0.2, {\n        y: -100\n      })\n      tl.to('.hat', 0.5, {\n        rotation: -90\n      })\n      tl.to('.hat', 0.5, {\n        x: -15 + '%'\n      })\n      tl.from('.heading', 0.5, {\n        autoAlpha: 0,\n        x: -15 + \"%\",\n        scaleX: 0\n        // width: 0\n        // left: -15% + \"%\"\n      }, \"-=0.5\")\n\n      tl.to('.logo', 0.5, {\n        autoAlpha: 0\n      }, \"+=0.5\")\n\n      tl.staggerFrom('.event', 1, {\n        autoAlpha: 0,\n        cycle: {\n          x: function(i) {\n            if(i%2 === 0)\n              return -50\n            else\n              return 50\n          }\n        }\n      }, 0.2)\n\n      Array.from(document.querySelector('.events').children, (event) => {\n        let letters = event.innerHTML.split(\"\")\n        let blockLetters = []\n        letters.forEach((letter) => {\n          if (letter === \" \")\n            blockLetters.push(\"<div class=\\\"letter\\\"> &nbsp; </div>\")\n          else\n            blockLetters.push(\"<div class=\\\"letter\\\">\" + letter + \"</div>\")\n        })\n        event.innerHTML = blockLetters.join(\"\")\n      })\n\n      let letters = document.querySelectorAll('.letter')\n      letters.forEach(function (letter) {\n        letter.style.display = \"inline-block\"\n      })\n\n      let t2 = new this.$gsap.TimelineMax({\n        repeat: -1,\n        yoyo: true\n      })\n\n      tl.staggerTo(\".letter\", 0.5, {\n        scale: 1.2\n      }, 0.1)\n\n      tl.staggerTo(\".letter\", 0.5, {\n        scale: 1\n      }, 0.1, 0)\n    }\n  }\n</script>\n\n<style scoped lang=\"sass\">\n    @import ../sass/chamberOfCoders\n</style>"]}]}